<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd"
       default-lazy-init="true">
    <description>Spring公共配置 </description>

    <context:component-scan base-package="com.channelsoft">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>

    <context:property-placeholder
            ignore-unresolvable="true" location="classpath*:/application.properties" />

    <bean id="mysqlDataSource" class="com.alibaba.druid.pool.xa.DruidXADataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}" />
        <property name="filters"><value>stat</value></property>

        <property name="maxActive" value="100"/>
        <property name="initialSize"><value>1</value></property>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait"><value>60000</value></property>
        <property name="minIdle"><value>0</value></property>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"><value>10000</value></property>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"><value>10000</value></property>


        <property name="maxEvictableIdleTimeMillis" value="15000"/>
        <property name="phyTimeoutMillis" value="15000"/>

        <!-- 超过时间限制是否回收 -->
        <!--<property name="removeAbandoned" value="true" />-->
        <!--&lt;!&ndash; 超过时间限制多长， 单位秒&ndash;&gt;-->
        <!--<property name="removeAbandonedTimeout" value="40" />-->
        <!--&lt;!&ndash; 关闭abanded连接时输出错误日志 &ndash;&gt;-->
        <!--<property name="logAbandoned" value="false" />-->




        <property name="validationQuery"><value>SELECT 'x'</value></property>
        <property name="testWhileIdle"><value>true</value></property>
        <property name="testOnBorrow"><value>false</value></property>
        <property name="testOnReturn"><value>false</value></property>

        <property name="poolPreparedStatements" value="false"></property>
        <property name="maxOpenPreparedStatements"><value>20</value></property>
    </bean>
    <bean id="atomikosMysqlDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="atomikosMysqlDataSource"/>
        <property name="xaDataSource" ref="mysqlDataSource"/>
        <!-- NOTE: 注意不要添加以下注释的参数 -->
         <property name="poolSize" value="0" />
         <property name="minPoolSize" value="0" />
        <property name="maxPoolSize" value="100" />
        <property name="borrowConnectionTimeout" value="30" />
        <property name="testQuery" value="select 1" />
        <property name="maintenanceInterval" value="20" />
        <!-- 如果不设置这个值，Atomikos使用默认的300秒(即5分钟)，那么在处理大批量数据读取的时候，一旦超过5分钟，就会抛出类似 Resultset is close 的错误 -->
        <property name="reapTimeout"><value>20000</value></property>
    </bean>
    <bean id="oracleDataSource" class="com.alibaba.druid.pool.xa.DruidXADataSource" init-method="init"     destroy-method="close">
        <property name="url" value="${oracle.config.jdbc.url}" />
        <property name="username" value="${oracle.config.jdbc.username}"/>
        <property name="password" value="${oracle.config.jdbc.password}" />
        <property name="filters"><value>stat</value></property>

        <property name="maxActive" value="100"/>
        <property name="initialSize"><value>1</value></property>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait"><value>60000</value></property>
        <property name="minIdle"><value>1</value></property>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"><value>60000</value></property>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"><value>30000</value></property>


        <property name="maxEvictableIdleTimeMillis" value="35000"/>
        <property name="phyTimeoutMillis" value="35000"/>

        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超过时间限制多长， 单位秒-->
        <property name="removeAbandonedTimeout" value="5" />




        <property name="validationQuery"><value>SELECT 'x'</value></property>
        <property name="testWhileIdle"><value>true</value></property>
        <property name="testOnBorrow"><value>false</value></property>
        <property name="testOnReturn"><value>false</value></property>

        <property name="poolPreparedStatements"><value>false</value></property>
        <property name="maxOpenPreparedStatements"><value>20</value></property>
    </bean>

    <bean id="atomikosOracleDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="atomikosOracleDataSource"/>
        <property name="xaDataSource" ref="oracleDataSource"/>
        <!-- NOTE: 注意不要添加以下注释的参数 -->
        <!-- <property name="poolSize" value="10" /> -->
        <!-- <property name="minPoolSize" value="10" /> -->
        <property name="maxPoolSize" value="100" />
        <property name="borrowConnectionTimeout" value="30" />
        <property name="testQuery" value="select 1" />
        <property name="maintenanceInterval" value="60" />
    </bean>

    <!--mysql config begin-->
    <bean id="mysqlEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath*:/persistence.xml" />
        <property name="persistenceUnitName" value="mysqlPU" />
        <property name="dataSource" ref="atomikosMysqlDataSource" />
        <property name="jpaVendorAdapter" ref="mysqlHibernateJpaVendorAdapter" />
        <property name="packagesToScan" value="com.channelsoft.apiplus.entity.mysql" />
        <property name="jpaProperties">
            <props>
                <!-- 不开启二级缓存 -->
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.generate_statistics">false</prop>
                <prop key="hibernate.connection.release_mode">after_statement</prop>
                <!-- 命名规则 My_NAME->MyName -->
                <!--<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</prop>
                <prop key="hibernate.current_session_context_class">jta</prop>
                <prop key="hibernate.transaction.manager_lookup_class">com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup</prop>

                <prop key="connection.autoReconnect">true</prop>
                <prop key="connection.autoReconnectForPools">true</prop>
                <prop key="connection.is-connection-validation-required">true</prop>

            </props>
        </property>
    </bean>
    <!-- Spring Data Jpa配置 -->
    <jpa:repositories base-package="com.channelsoft.apiplus.repository.mysql"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="mysqlEntityManagerFactory" />
    <bean id="mysqlHibernateJpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform">
            <value>org.hibernate.dialect.MySQL5InnoDBDialect</value>
        </property>
        <property name="showSql">
            <value>true</value>
        </property>
        <property name="generateDdl">
            <value>false</value>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="atomikosMysqlDataSource" />
    </bean>
    <!--mysql config end-->
    <bean id="oracleEntityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath*:/persistence.xml" />
        <property name="persistenceUnitName" value="oraclePU" />
        <property name="dataSource" ref="atomikosOracleDataSource" />
        <property name="jpaVendorAdapter" ref="oracleHibernateJpaVendorAdapter" />
        <property name="packagesToScan" value="com.channelsoft.apiplus.entity.oracle" />
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">none</prop>
                <prop key="hibernate.connection.driver_class">oracle.jdbc.xa.client.OracleXADataSource</prop>
                <prop key="hibernate.current_session_context_class">jta</prop>
                <prop key="hibernate.transaction.manager_lookup_class">com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup
                </prop>
            </props>
        </property>
    </bean>
    <jpa:repositories base-package="com.channelsoft.apiplus.repository.oracle"
                      transaction-manager-ref="transactionManager"
                      entity-manager-factory-ref="oracleEntityManagerFactory" />
    <bean id="oracleHibernateJpaVendorAdapter"
          class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform">
            <value>org.hibernate.dialect.Oracle10gDialect</value>
        </property>
        <property name="showSql">
            <value>true</value>
        </property>
        <property name="generateDdl">
            <value>false</value>
        </property>
    </bean>
    <!--oracle config end-->



    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="300" />
    </bean>

    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown" value="true" />
    </bean>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager" />
        <property name="userTransaction" ref="atomikosUserTransaction" />
        <property name="allowCustomIsolationLevels" value="true" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!--<tx:annotation-driven transaction-manager="transaction-manager" proxy-target-class="true" />-->

    <!-- 定义aspectj -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true" />-->

    <!-- mybatis 配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource">
            <ref bean="mybatisDataSource"/>
        </property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.channelsoft.apiplus.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <bean id="mybatisDataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${oracle.config.jdbc.driver}" />
        <property name="url" value="${oracle.config.jdbc.url}" />
        <property name="username" value="${oracle.config.jdbc.username}" />
        <property name="password" value="${oracle.config.jdbc.password}" />

        <!--maxActive: 最大连接数量-->
        <property name="maxActive" value="10"/>
        <!--minIdle: 最小空闲连接-->
        <property name="minIdle" value="5"/>
        <!--maxIdle: 最大空闲连接-->
        <property name="maxIdle" value="10"/>
        <!--initialSize: 初始化连接-->
        <property name="initialSize" value="5"/>
        <!-- 连接被泄露时是否打印 -->
        <property name="logAbandoned" value="true"/>
        <!--removeAbandoned: 是否自动回收超时连接-->
        <property name="removeAbandoned"  value="true"/>
        <!--removeAbandonedTimeout: 超时时间(以秒数为单位)-->
        <property name="removeAbandonedTimeout" value="10"/>
        <!--maxWait: 超时等待时间以毫秒为单位 1000等于60秒-->
        <property name="maxWait" value="1000"/>
        <!-- 在空闲连接回收器线程运行期间休眠的时间值,以毫秒为单位. -->
        <property name="timeBetweenEvictionRunsMillis" value="10000"/>
        <!--  在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="10"/>
        <!-- 1000 * 60 * 30  连接在池中保持空闲而不被空闲连接回收器线程-->
        <property name="minEvictableIdleTimeMillis" value="1000"/>
        <property name="validationQuery" value="select count(*) from v$session"/>
    </bean>

    <!--<mvc:annotation-driven />-->
</beans>